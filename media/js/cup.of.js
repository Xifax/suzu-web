// Generated by CoffeeScript 1.3.3
(function() {
  var locked, reload, toggle,
    __slice = [].slice;

  locked = false;

  reload = function() {
    return location.reload();
  };

  $(window).scroll(function() {
    return $('.fixed').css("top", Math.max(0, 20 - $(this).scrollTop()));
  });

  toggle = function() {
    var div, divs, _i, _len, _results;
    divs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = divs.length; _i < _len; _i++) {
      div = divs[_i];
      _results.push($(div).slideToggle(300));
    }
    return _results;
  };

  $(function() {
    return $('.circle').mousedown(function(event) {
      switch (event.which) {
        case 1:
          locked = !locked;
          $('.kanji').toggleClass('kanji-locked');
          return $('.circle').toggleClass('circle-locked');
        case 2:
          return location.reload();
      }
    });
  });

  $(function() {
    return $('.kanji').mouseover(function() {
      if ($('.toolbar-top').css('display') === 'none') {
        return toggle('.toolbar-top', '.toolbar-bottom');
      }
    });
  });

  $(function() {
    return $('.kanji').mouseout(function() {
      if ($('.toolbar-top').css('display') === 'block' && !locked) {
        return toggle('.toolbar-top', '.toolbar-bottom');
      }
    });
  });

  $(function() {
    return $('.roll').click(function() {
      $.get('/lock');
      return reload();
    });
  });

  $(function() {
    return $('ruby').hover(function() {
      $('.help').toggle();
      return $('#' + this.id + '.definition').toggle();
    });
  });

}).call(this);
